description = 'hello-app'

// Variable that will contain the list of changed modules
ext.changedModulesNames = ''

ext.changedModules = [] as Set

ext.outputFileName = 'build-success.txt'

allprojects { innerProject ->
    group = 'edu.ka.hello.increment'
    version = '1.0-SNAPSHOT'

    apply plugin: 'java'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    afterEvaluate {
        task checkModuleChanged {

            description 'Checks whether a certain module had been changed in order to be build using Maven'

            // Configures project and dependent source directories as inputs
            def projCompileDeps = innerProject.configurations.compile.getAllDependencies().withType(ProjectDependency)
            def projRuntimeDeps = innerProject.configurations.runtime.getAllDependencies().withType(ProjectDependency)
            def dependedUponProjects = (projCompileDeps + projRuntimeDeps)*.dependencyProject
            def dependentSrcDirs = dependedUponProjects*.sourceSets*.main*.allSource*.srcDirs
            def ownSrcDirs = innerProject.sourceSets.main.allSource.srcDirs

//            println "project ${innerProject} ownSrcDirs ${ownSrcDirs}"
//            println "project ${innerProject} depSrcDirs ${dependentSrcDirs}"

            inputs.files files(dependentSrcDirs, ownSrcDirs, "${innerProject.projectDir}/pom.xml")

            outputs.upToDateWhen {                  
                new File("${innerProject.projectDir}/target/${rootProject.ext.outputFileName}").exists()
            }

            doLast {
                println "Module ${innerProject.name} had been changed. Adding to build list"

                rootProject.ext.changedModules << innerProject

                if (rootProject.ext.changedModulesNames) {
                    rootProject.ext.changedModulesNames += ",:${innerProject.name}"                    
                } else {
                    rootProject.ext.changedModulesNames += ":${innerProject.name}"
                }
            }

        }
    }
}

project(":hello-webapp") {
    description = 'Hello world web application'

    apply plugin: 'war'
    apply plugin: 'jetty'

    dependencies {
        runtime project(':hello-impl')
    }
}

project(":hello-impl") {
    description = 'Hello world implementation'

    dependencies {
        compile project(':hello-api')
    }
}

task cleanChangedModules(description: 'Deletes build success dummy file from changed modules') {
    // Make sure that this task depends on checkModuleChanged in all projects
    subprojects.each { subproject ->
        dependsOn << ":${subproject.name}:checkModuleChanged"
    }

    onlyIf {
        project.ext.changedModulesNames
    }

    doFirst {
        project.ext.changedModules.each { changedModule -> 
            new File("${changedModule.projectDir}/target/${rootProject.ext.outputFileName}").delete()
        }                
    }    
}

// This task dependsOn cleanChangedModules in order to make sure skipped modules are rebuild in case
// Maven execution fails in the middle
task buildChangedModules(type: Exec, description: 'Build changed modules using Maven', dependsOn: cleanChangedModules) {

    // Make sure that this task depends on checkModuleChanged in all projects
    subprojects.each { subproject ->
        dependsOn << ":${subproject.name}:checkModuleChanged"
    }

    onlyIf {
        project.ext.changedModulesNames
    }

    doFirst {

        commandLine 'mvn', 'clean', 'install', '-pl', "${project.ext.changedModulesNames}"

        logger.info "Changed modules are: ${project.ext.changedModulesNames}"
        logger.info "Executed command: ${commandLine}"
    }

}

task createGradleWrapper(type: Wrapper) {
    gradleVersion = '1.4'
}

repositories {
    mavenCentral()
}